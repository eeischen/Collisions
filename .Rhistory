xpathSApply(html, "//td[@id='col-citedby']", xmlValue)
library(httr)
html2=GET(url)
content2=content(html2, as="text")
parsedHtml=htmlParse(content2, asText=TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
pg2=GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
pg2
names(pg2)
google=handle("http://google.com")
pg1=GET(handle=google,path="/")
pg2=GET(handle=google,path="search")
swirl()
install.packages("swirl")
library(swirl)
swirl()
simbias()
x1c<-simbias()
apply(x1c, 1, mean)
fit1<-lm(Fertility~Agriculture, swiss)
fit3<-lm(Fertility~Agriculture+Examination, Education, swiss)
fit3<-lm(Fertility~Agriculture+Examination+Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d<-deviance(fit3)/43
n<-deviance(fit1)-deviance(fit3)
n<-(deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl<-glm(ravenWinNum~ravenScore, family, ravenData)
mdl<-glm(ravenWinNum~ravenScore, family=binomial, ravenData)
lodds<-predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq)0.95, 1
qchisq(0.95, 1)
rpois(n, lambda)
var(rpois(n, lambda))
var(rpois(n, 50))
View(hits)
class(hits[, 'date'])
as.integer(head(hits[,'date']))
mdl<-glm(visits~date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[, 'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(.95,lambda)
help()
mdl2<-simplystats/(visits+1)
offset=log(visits+1)
mdl2<-glm(simplystats/(visits+1)~date, poisson, visits)
mdl2<-glm(simplystats/(visits+1)~date, poisson, hits)
mdl2<-glm(formula=simplystats~date, family=poisson, data=hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
view(Student)
View(Student)
View(student)
View(tidydata)
?View
library("MASS")
?shuttle
?logit
logq1<-glm(shuttle$use~shuttle$wind)
?glm
logq1<-glm(shuttle$use~shuttle$wind, family="binomial", summary(logq1))
logq1<-glm(shuttle$use~shuttle$wind, family="binomial")
summary(logq1)
exp(-0.25131)
exp(-0.03181)
exp(logq1$coeff)
1-0.969
logq2<-glm(shuttle$use~shuttle$wind+shuttle$magn, family="binomial", summary(logq1))
logq2<-glm(shuttle$use~shuttle$wind+shuttle$magn, family="binomial")
exp(logq2$coeff)
logq2a<-glm(shuttle$use~shuttle$wind*shuttle$magn, family="binomial")
exp(logq2a)
logq2a<-glm(shuttle$use~shuttle$wind-shuttle$magn, family="binomial")
exp(logq2a)
logq2a<-glm(shuttle$use~shuttle$wind+shuttle$magn, family="binomial")
exp(logq2a)
logq2<-glm(shuttle$use~shuttle$wind+shuttle$magn, family="binomial")
exp(logq2)
summary(logq2)
exp(logq1)
?shuttle
library(MASS)
logq1<-glm(auto~wind, family=binomial, data=shuttle)
logq1<-glm(shuttle$auto~shuttle$wind, family=binomial)
shuttle$auto
logq1<-glm(use~wind, family=binomial, data=shuttle)
exp(logq1)
exp(logq1$coef)
logq1<-glm(use~wind+magn, family=binomial, data=shuttle)
logq2<-glm(use~wind+magn, family=binomial, data=shuttle)
exp(logq2$coef)
logq2a<-glm(use~wind*magn, family=binomial, data=shuttle)
exp(logq2a$coef)
?shutttle
?shuttle
logq1<-glm(use~wind, family=binomial, data=shuttle)
head(shuttle$use)
as.numeric(shuttle$use)
logq1a<-glm((1-use)~wind, family=binomial, data=shuttle)
logq1a<-glm(I(1-use)~wind, family=binomial, data=shuttle)
logq1a<-glm(I(1-as.numeric(use)~wind, family=binomial, data=shuttle)
logq1a<-glm(I(1-as.numeric(use))~wind, family=binomial, data=shuttle)
logq1a<-glm((1-as.numeric(use))~wind, family=binomial, data=shuttle)
1-as.numeric(use)
1-as.numeric(shuttle$use)
as.numeric(shuttle#use)
as.numeric(shuttle$use)
logq1a<-glm((use-1)~wind, family=binomial, data=shuttle)
logq1a<-glm((as.numeric(use)-1)~wind, family=binomial, data=shuttle)
exp(logq1a$coef)
exp(logq1$coef)
logq3<-glm((2-as.numeric(use))~wind, family=binomial, data=shuttle)
exp(logq3$coef)
co1<-exp(logq1$coef)
co3<-exp(logq3$coef)
dim(co1)
co1[1]
co1[2]
co1[2]/co2[2]
co1[2]/co3[2]
co1[1]/co3[1]
1/co1
1/co3
?InsectSprays
glm4<-glm(count~factor(spray), family=poisson, data=InsectSprays)
summary(glm4)
?glm
glm4<-glm(count~factor(spray), family=poisson, data=InsectSprays, intercept=FALSE)
glm4<-glm(count~factor(spray), family=poisson, intercept = TRUE, data=InsectSprays)
summary(glm4)
glm4$coef
glm4$coef[1]
glm4$coef[2]
glm4$coef[1]/glm4$coef[2]
log(47.85481)
glm4<-glm(count~factor(spray), family=poisson, data=InsectSprays)
glm4$coef
glm4a<-glm.fit(count~factor(spray), family=poisson, data=InsectSprays)
glm4a<-glm.fit(InsectSprays$count~factor(InsectSprays$spray), family=poisson)
glm4a<-glm.fit(InsectSprays$count~factor(InsectSprays$spray), family="poisson")
glm4<-glm(count~factor(spray), family="poisson", data=InsectSprays)
glm4$coef
exp(glm4$coef[2])
exp(0.05588046)
exp(2.67414865+0.05588046)
exp(2.67414865)/exp(0.05588046)
(exp(2.67414865)/exp(0.05588046))^{-1}
e^{glm4$coef[1]/glm4$coef[2]}
exp(glm4$coef[1]/glm4$coef[2])
glm4nofac<-glm(count~spray, family="poisson", data=InsectSprays)
glm4nofac$coef
glm4nofac<-glm(count~spray-1, family="poisson", data=InsectSprays)
glm4nofac$coef
glm4nofac$coef[2]/glm4nofac$coef[1]
glm4$coef
glm4<-glm(count~factor(spray)-1, family="poisson", data=InsectSprays)
glm4$coef
glm4$coef[2]/glm4$coef[1]
(glm4$coef[2]/glm4$coef[1])^(-1)
glm4$coef[1]/glm4$coef[2]
exp(0.9795312)
exp(glm4$coef[1]-glm4$coef[2])
?InsectSprays
?mtcars
?log
log(exp(1))
t<-log(mtcars$mpg)
?InsectSprays
glm(mtcars$cyl~mtcars$am+offset(t), family=poisson)
glm5<-glm(mtcars$cyl~mtcars$am+offset(t), family=poisson)
t2<-log10+t2
t2<-log10+t
t2<-log(10)+t
t2
t
glm5a<-glm(mtcars$cyl~mtcars$am+offset(t2), family=poisson)
glm5a$coef/glm5$coef
log(10)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot<-0
splineTerm<-sapply(knot, function(knot)(x>knot)*(x-knot))
xMat<-cbind(1, x, splineTerm)
lm(y~xMat-1)
yhat<-predict(lm(y~xMat-1))
plot(x, y, frame=FALSE, pch=21, bg="lightblue", cex=2)
lines(x, yhat, col="red",lwd=2)
exp(-1.0242)
exp(-0.1826)
yhat<-predict(lm(y~xMat1))
yhat<-predict(lm(y~xMat))
lm(y~xMat)
x
logq3a<-glm((1-as.numeric(use))~wind, family=binomial, data=shuttle)
logq3<-glm((2-as.numeric(use))~wind, family=binomial, data=shuttle)
logq3a<-glm(I(1-as.numeric(use))~wind, family=binomial, data=shuttle)
summary(logq3)
summary(logq1)
summary(logq1a)
data(kernlab)
library(kernlab)
load.packages("kernlab")
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
library(kernlab)
data(spam)
set.seed(333)
smallSpam<-spam[sample(dim(spam)[1], size=10)]
smallSpam<-spam[sample(dim(spam)[1], size=10),]
head(smallSpam)
spamLabel<-(smallSpam$type="spam")*1+1
spamLabel<-(smallSpam$type=="spam")*1+1
plot(smallSpam$capitalAve, col=spamLabel)
librarycaret
library(caret)
install.packages("caret")
library(caret)
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type, p=0.75, list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
dim(training)
dim(inTrain)
dim(testing)
str(inTrain)
head(inTrain)
set.seed(32343)
modelFit<-train(type~., data=training, method="glm")
?train
modelFit<-train(type~., data=training, method="glm")
modelFit
head(training)
modelFit<-train(type~., data=training, method="glmboost")
modelFit<-train(type~., data=training, method="glm")
?train
names(getModelInfo())
head(training, 2)
library(caret)
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type, p=0.75, list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit<-train(type~., data=training, method="glm")
modelFit
modelFit<-train(type~.,data=training, method="glm")
library(caret)
library(kernlab)
data(spam)
inTrain<-createDataPartition(y=spam$type, p=0.75, list=FALSE)
training<-spam[inTrain,]
testing<-spam[-inTrain,]
dim(training)
set.seed(32343)
modelFit<-train(type~.,data=training, method="glm")
rforest$ntree
?predict
pred<-predict(rforest, test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
class(vowel.train$y)
vowel.train$y<-as.factor(vowel.train$y)
class(vowel.train)
vowel.train$y<-factor(vowel.train$y)
class(vowel.train)
class(vowel.train$y)
vowel.train$y<-as.factor(vowel.train$y)
class(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
class(vowel.test$y)
set.seed(33833)
?rain
?train
library("caret")
?train
set.seed(33833)
train(y~., data=vowel.train, method="rf")
set.seed(33833)
modfitrf<-train(y~., data=vowel.train, method="rf")
?predict
predict(modfitrf, vowel.test)
predictrf<-predict(modfitrf, vowel.test)
summary(predictrf)
predictrf$confusionMatrix
names(predictrf)
str(predictrf)
?confusion
?confusionMatrix
confusionMatrix(predictrf)
confusionMatrix(predictrf, vowel.test)
confusionMatrix(predictrf, reference=vowel.test)
confusionMatrix(data=predictrf, reference=vowel.test)
set.seed(33833)
predictgbm<-predict(y~., data=vowel.train, method="gbm")
set.seed(33833)
predictgbm<-train(y~., data=vowel.train, method="gbm")
confusionMatrix(data=predictrf, reference=vowel.test$y)
confusionMatrix(data=predictgbm, reference=vowel.test$y)
confgbm<-confusionMatrix(data=predictgbm, reference=vowel.test$y)
summary(confgbm)
confrf<-confusionMatrix(data=predictrf, reference=vowel.test$y)
summary(confrf)
str(confrf)
names(confrf)
names(confgbm)
confagree<-confusionMatrix(modelrf, modelgbm)
confrf<-confusionMatrix(data=predictrf, reference=predictgbm)
head(predictgbm)
set.seed(33833)
modfitgbm<-train(y~., data=vowel.train, method="gbm")
?as.factor
set.seed(33833)
modfitgbm<-train(y~., data=vowel.train, method="gbm")
confrf
predictgbm<-predict(modfitgbm, vowel.test)
confgbm<-confusionMatrix(predictgbm, reference=vowel.test$y)
confgbm
set.seed(33833)
modfitgbm<-train(y~., data=vowel.train, method="gbm")
predictgbm<-predict(modfitgbm, vowel.test)
confgbm<-confusionMatrix(predictgbm, reference=vowel.test$y)
confgbm
confrf
confagree<-confusionMatrix(predictrf, predictgbm)
confagree
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
names(training)
set.seed(62433)
modfitrf<-train(diagnosis~., data=training, method="rf")
modfitgbm<-train(diagnosis~., data=training, method="gbm")
modfitlda<-train(diagnosis~., data=training, method="lda")
predictrf<-predict(modfitrf, testing)
predictgbm<-predict(modfitgbm, testing)
predictlda<-predict(modfitlda, testing)
confusionMatrix(predictrf)
confusionMatrix(predictrf, reference=testing$diagnosis)
confusionMatrix(predictgbm, reference=testing$diagnosis)
confusionMatrix(predictlda, reference=testing$diagnosis)
predDF<-data.frame(predictrf, predict, gbm, predict, lda, diagnosis=testing$diagnosis)
predDF<-data.frame(predictrf, predictgbm, predictlda, diagnosis=testing$diagnosis)
combModFit<-train(diagnosis~., method="rf", data=predDF)
combModfFit
predDF
combModFit
confusionMatrix(combModFit, reference=testing$diagnosis)
confusionMatrix(predictlda, reference=testing$diagnosis)$accuracy
confusionMatrix(predictlda, reference=testing$diagnosis)$Accuracy
predictall<-predict(combModFit, testing)
confusionMatrix(predictall, reference=testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
names(training)
names(getModelInfo())
set.seed(233)
modfit<-train(CompressiveStrength~., data=training, method="lasso")
modfit
?plot.enet
plot(modfit, xvar=c("penalty"))
plot.enet(modfit, xvar=c("penalty"))
plot.enet(modFit$finalModel, xvar="penalty", use.color=TRUE)
plot.enet(modfit$finalModel, xvar="penalty", use.color=TRUE)
fileurl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(fileurl, destfile="gaData.csv", method="curl")
data<-read.csv("gaData.csv")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
?bats
install.packages(forecast)
library(forecast)
?forecast
install.packages("forecast")
library(forecast)
?bast
?bats
bats(tstrain)
modfit<-bats(tstrain)
forecast(modfit)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
install.packages("e1071")
library(e1071)
svm.model<-svm(CompressiveStrength~., data=training)
svm.pred<-predict(svm.model, testing)
set.seed(325)
svm.model<-svm(CompressiveStrength~., data=training)
svm.pred<-predict(svm.model, testing)
svm.pred$rmse
svm.pred$RMSE
names(svm.pred)
?rmse
?RMSE
RMSE(svm.pred, concrete$CompressiveStrength)
RMSE(svm.pred, testing$CompressiveStrength)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
modfit<-bats(tstrain)
modfit
?forecast
forecast(modfit, h=nrow(training), level=c(95))
fc<-forecast(modfit, h=nrow(training), level=c(95))
nrow(training)
fc<-forecast(modfit, h=nrow(testing), level=c(95))
dim(fc)
length(fc)
fc
nrow(fc)
dim(testing)
dim(fc)
str(fc)
head(fc$x)
?>
?>=
value<-sum(testing$visitsTumblr>=fc$lower && testing$visitsTumblr<=fc$upper)
value
value<-sum(testing$visitsTumblr>=fc$lower & testing$visitsTumblr<=fc$upper)
value
?&&
?&
?and
226/nrow(testing)
shiny::runApp('Desktop/coursera/CreatingDataProducts/CourseraDDP_Project/Collisions')
shiny::runApp('Desktop/coursera/CreatingDataProducts/CourseraDDP_Project/Collisions')
shiny::runApp('Desktop/coursera/CreatingDataProducts/CourseraDDP_Project/Collisions')
shiny::runApp('Desktop/coursera/CreatingDataProducts/CourseraDDP_Project/Collisions')
shiny::runApp('Desktop/coursera/CreatingDataProducts/CourseraDDP_Project/Collisions')
head(collisions)
collisions<-read.csv(collisions)
collisions<-read.csv("collisions.csv")
collisions<-read.csv("collisions.csv", sep=",")
setwd("~/Desktop/coursera/CreatingDataProducts/CourseraDDP_Project/Collisions")
shiny::runApp()
collisions<-read.csv("collisions.csv", sep=",")
shiny::runApp()
names(collisions)<-tolower(names(collisions))
allzipcode<-collisions$zip.code
zipcode<-allzipcode[!is.na(allzipcode)]
zip<-unique(zipcode)
zip<-zip[order(zip)]
zip<-as.list(zip)
names(zip)<-zip
head(zip)
head(names(zip))
shiny::runApp()
alldates<-as.Date(collisions$date, "%m/%d/%Y")
dates<-unique(alldates)
dates<-dates[order(dates)]
startdate<-dates[1]
enddate<-dates[length(dates)]
startdate
shiny::runApp()
head(zip)
class(zip)
class(zip[1])
allzipcode<-collisions$zip.code
zipcode<-allzipcode[!is.na(allzipcode)]
zip<-unique(zipcode)
zip<-zip[order(zip)]
zip<-as.list(zip)
class(zip)
class(zip[1])
shiny::runApp()
shiny::runApp()
